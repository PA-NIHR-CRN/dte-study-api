@model BPOR.Rms.Models.Volunteer.VolunteerFormViewModel

@{
    ViewData["Title"] = "Add a volunteer - Volunteer Registry - Be Part of Research";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*Error summary links to Radio buttons*@
@*add bread crumbs*@
@*conditionally appearing ethnic backgrounds*@
@*areas of research needs to be more reusable*@
@*consent page*@
<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds govuk-grid-column-one-half-from-desktop">
        <h1 class="govuk-heading-xl">Add a volunteer to the volunteer registry</h1>
        <p class="govuk-body">All fields are mandatory unless specified otherwise</p>

        <form asp-action="Create">
            <div class="govuk-form-group @(Html.ViewData.ModelState["FirstName"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="FirstName" class="govuk-label" for="FirstName">
                    @Html.DisplayNameFor(model => model.FirstName)
                </label>
                @if (Html.ViewData.ModelState["FirstName"]?.Errors.Count > 0)
                {
                    <span id="FirstName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </span>
                    <input asp-for="FirstName" class="govuk-input  govuk-input govuk-input--error" id="FirstName" aria-describedby="FirstName-error" value="@(Model.FirstName)" />
                }
                else
                {
                    <input asp-for="FirstName" class=" govuk-input" id="FirstName" value="@(Model.FirstName)" />
                }
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["LastName"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="LastName" class="govuk-label" for="LastName">
                    @Html.DisplayNameFor(model => model.LastName)
                </label>
                @if (Html.ViewData.ModelState["LastName"]?.Errors.Count > 0)
                {
                    <span id="LastName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.LastName)
                    </span>
                    <input asp-for="LastName" class="govuk-input  govuk-input govuk-input--error" id="LastName" aria-describedby="LastName-error" value="@(Model.LastName)" />
                }
                else
                {
                    <input asp-for="LastName" class=" govuk-input" id="LastName" value="@(Model.LastName)" />
                }
            </div>

            <div class="govuk-form-group  @(Html.ViewData.ModelState["DateOfBirth"]?.Errors.Count > 0||Html.ViewData.ModelState["DateOfBirth.Day"]?.Errors.Count > 0 || Html.ViewData.ModelState["DateOfBirth.Month"]?.Errors.Count > 0 || Html.ViewData.ModelState["DateOfBirth.Year"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="DateOfBirth" class="govuk-label">
                    @Html.DisplayNameFor(model => model.DateOfBirth)
                </label>

                <div class="govuk-hint">
                    For example, 31 3 1980.

                    Must be 18 or over
                </div>

                @if (Html.ViewData.ModelState["DateOfBirth"]?.Errors.Count > 0)
                {
                    <span id="LastName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.DateOfBirth)
                    </span>
                }

                @if (Html.ViewData.ModelState["DateOfBirth.Day"]?.Errors.Count > 0)
                {
                    <span id="DateOfBirthDay-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.DateOfBirth.Day)
                    </span>
                }
                @if (Html.ViewData.ModelState["DateOfBirth.Month"]?.Errors.Count > 0)
                {
                    <span id="DateOfBirthMonth-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.DateOfBirth.Month)
                    </span>
                }
                @if (Html.ViewData.ModelState["DateOfBirth.Year"]?.Errors.Count > 0)
                {
                    <span id="DateOfBirthYear-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.DateOfBirth.Year)
                    </span>
                }
                <div class="govuk-date-input" id="DateOfBirth">
                    <!-- Day -->
                    <div class="govuk-date-input__item">
                        <label class="govuk-label govuk-label--n" asp-for="DateOfBirth.Day">@Html.DisplayNameFor(model => model.DateOfBirth.Day)</label>
                        <input class="govuk-input govuk-date-input__input govuk-input--width-3" asp-for="DateOfBirth.Day" autocomplete="off" type="text" inputmode="numeric">

                    </div>
                    <!-- Month -->
                    <div class="govuk-date-input__item">
                        <label class="govuk-label govuk-label--n" asp-for="DateOfBirth.Month">@Html.DisplayNameFor(model => model.DateOfBirth.Month)</label>
                        <input class="govuk-input govuk-date-input__input govuk-input--width-3" asp-for="DateOfBirth.Month" autocomplete="off" type="text" inputmode="numeric">

                    </div>
                    <!-- Year -->
                    <div class="govuk-date-input__item">
                        <label class="govuk-label govuk-label--n" asp-for="DateOfBirth.Year">@Html.DisplayNameFor(model => model.DateOfBirth.Year)</label>
                        <input class="govuk-input govuk-date-input__input govuk-input--width-4" asp-for="DateOfBirth.Year" autocomplete="off" type="text" inputmode="numeric" />
                    </div>
                </div>
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["PostCode"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="PostCode" class="govuk-label" for="PostCode">
                    @Html.DisplayNameFor(model => model.PostCode)
                </label>
                @if (Html.ViewData.ModelState["PostCode"]?.Errors.Count > 0)
                {
                <span id="PostCode-error" class="govuk-error-message">
                    <span class="govuk-visually-hidden">Error:</span>
                    @Html.ValidationMessageFor(model => model.PostCode)
                </span>
                <input asp-for="PostCode" class="govuk-input  govuk-input govuk-input--error" id="PostCode" aria-describedby="PostCode-error" value="@(Model.PostCode)" />
                    <button type="submit" name="action" value="AddressLookup" class="govuk-button" data_module="govuk-button">Search Addresses</button>
                }
                else
                {
                    <input asp-for="PostCode" class=" govuk-input" id="PostCode" value="@(Model.PostCode)" />
                    <button type="submit" name="action" value="AddressLookup" class="govuk-button" data_module="govuk-button">Search Addresses</button>
                }
            </div>

            @if (Model.Addresses != null)
            {
                <div class="govuk-form-group @(Html.ViewData.ModelState["SelectedAddressId"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                    <label asp-for="SelectedAddressId" class="govuk-label" for="SelectedAddressId">
                        @Html.DisplayNameFor(model => model.SelectedAddressId)
                    </label>

                    @Html.DropDownListFor(
                             model => model.SelectedAddressId,
                             new SelectList(Model.Addresses, "FullAddress", "FullAddress"),
                             new { @class = "govuk-select-custom" })

                </div>
            }

            <div class="govuk-form-group @(Html.ViewData.ModelState["PreferredContactMethod"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="PreferredContactMethod" class="govuk-label" for="PreferredContactMethod">
                    @Html.DisplayNameFor(model => Model.PreferredContactMethod)
                </label>
                @if (Html.ViewData.ModelState["PreferredContactMethod"]?.Errors.Count > 0)
                {
                    <span id="LastName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.PreferredContactMethod)
                    </span>
                }
                <div class="govuk-radios" data-module="govuk-radios">
                    @foreach( var preferredContactOptions in Model.PrefferdContactMethodValues )
                    {
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.PreferredContactMethod, preferredContactOptions["value"], new { @class = "govuk-radios__input", id = "PreferredContactMethod"+preferredContactOptions["value"]})
                        @Html.Label("PreferredContactMethod"+preferredContactOptions["value"],preferredContactOptions["label"], new { @class = "govuk-label govuk-radios__label" })
                    </div>
                    }
                </div>
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["Email"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="Email" class="govuk-label" for="Email">
                    @Html.DisplayNameFor(model => model.Email)
                </label>
                @if (Html.ViewData.ModelState["Email"]?.Errors.Count > 0)
                {
                    <span id="Email-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.Email)
                    </span>
                    <input asp-for="Email" class="govuk-input  govuk-input govuk-input--error" id="Email" aria-describedby="Email-error" value="@(Model.Email)" />
                }
                else
                {
                    <input asp-for="Email" class=" govuk-input" id="Email" value="@(Model.Email)" />
                }
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["LandLine"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="LandLine" class="govuk-label" for="LandLine">
                    @Html.DisplayNameFor(model => model.LandLine)
                </label>
                @if (Html.ViewData.ModelState["LandLine"]?.Errors.Count > 0)
                 {
                    <span id="LandLine-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.LandLine)
                    </span>
                    <input asp-for="LandLine" class="govuk-input  govuk-input govuk-input--error" id="LandLine" aria-describedby="LandLine-error" value="@(Model.LandLine)" />
                }
                else
                {
                    <input asp-for="LandLine" class=" govuk-input" id="LandLine" value="@(Model.LandLine)" />
                }
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["Mobile"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="Mobile" class="govuk-label" for="Mobile">
                    @Html.DisplayNameFor(model => model.Mobile)
                </label>
                @if (Html.ViewData.ModelState["Mobile"]?.Errors.Count > 0)
                {
                    <span id="Mobile-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.Mobile)
                    </span>
                    <input asp-for="Mobile" class="govuk-input  govuk-input govuk-input--error" id="Mobile" aria-describedby="Mobile-error" value="@(Model.Mobile)" />
                }
                else
                {
                    <input asp-for="Mobile" class=" govuk-input" id="Mobile" value="@(Model.Mobile)" />
                }
            </div>


            <div class="govuk-form-group @(Html.ViewData.ModelState["SexRegisteredAtBirth"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="SexRegisteredAtBirth" class="govuk-label" for="SexRegisteredAtBirth">
                    @Html.DisplayNameFor(model => Model.SexRegisteredAtBirth)
                </label>
                @if (Html.ViewData.ModelState["SexRegisteredAtBirth"]?.Errors.Count > 0)
                {
                    <span id="SexRegisteredAtBirth-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.SexRegisteredAtBirth)
                    </span>
                }
                <div class="govuk-radios" data-module="govuk-radios">
                    @foreach( var SexRegisteredAtBirthOptions in Model.SexRegisteredAtBirthValues )
                    {
                        <div class="govuk-radios__item">
                            @Html.RadioButtonFor(m => m.SexRegisteredAtBirth, SexRegisteredAtBirthOptions["value"], new { @class = "govuk-radios__input", id = "SexRegisteredAtBirth"+SexRegisteredAtBirthOptions["value"]})
                            @Html.Label("SexRegisteredAtBirth"+SexRegisteredAtBirthOptions["value"],SexRegisteredAtBirthOptions["label"], new { @class = "govuk-label govuk-radios__label" })
                        </div>
                    }
                </div>
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["GenderIdentitySameAsBirth"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="GenderIdentitySameAsBirth" class="govuk-label" for="GenderIdentitySameAsBirth">
                    @Html.DisplayNameFor(model => Model.GenderIdentitySameAsBirth)
                </label>
                @if (Html.ViewData.ModelState["GenderIdentitySameAsBirth"]?.Errors.Count > 0)
                {
                    <span id="GenderIdentitySameAsBirth-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.GenderIdentitySameAsBirth)
                    </span>
                }

                <div class="govuk-radios" data-module="govuk-radios">
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.GenderIdentitySameAsBirth, "true" , new { @class = "govuk-radios__input", id = "GenderIdentitySameAsBirthYes" })
                        @Html.Label("GenderIdentitySameAsBirthYes", "Yes", new { @class = "govuk-label govuk-radios__label" })
                    </div>
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.GenderIdentitySameAsBirth, "false" , new { @class = "govuk-radios__input", id = "GenderIdentitySameAsBirthNo" })
                        @Html.Label("GenderIdentitySameAsBirthNo", "No", new { @class = "govuk-label govuk-radios__label" })
                    </div>
                    <p class="govuk-body text-secondary radio-options-divider">or</p>
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.GenderIdentitySameAsBirth, "null", new { @class = "govuk-radios__input", id = "GenderIdentitySameAsBirthpreferNotToSay" })
                        @Html.Label("SGenderIdentitySameAsBirthpreferNotToSay", "Prefer not to say", new { @class = "govuk-label govuk-radios__label" })
                    </div>
                </div>
            </div>


            <div class="govuk-form-group @(Html.ViewData.ModelState["EthnicGroup"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="EthnicGroup" class="govuk-label" for="EthnicGroup">
                    @Html.DisplayNameFor(model => Model.EthnicGroup)
                </label>
                @if (Html.ViewData.ModelState["EthnicGroup"]?.Errors.Count > 0)
                {
                    <span id="EthnicGroup-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.EthnicGroup)
                    </span>
                }
                <div class="govuk-radios" data-module="govuk-radios">
                    @foreach( var EthnicGroupOptions in Model.EthnicGroupValues )
                    {
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.EthnicGroup, EthnicGroupOptions["value"], new { @class = "govuk-radios__input", id = "EthnicGroup"+EthnicGroupOptions["value"].Replace(" ","")})
                        @Html.Label("EthnicGroup"+EthnicGroupOptions["value"],EthnicGroupOptions["label"], new { @class = "govuk-label govuk-radios__label" })
                    </div>
                    }
                </div>
            </div>


            <!-- TODO ethnic backgrounds conditionally showing-->
            <div class="govuk-form-group @(Html.ViewData.ModelState["EthnicBackground"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="EthnicBackground" class="govuk-label" for="EthnicBackground">
                    @Html.DisplayNameFor(model => model.EthnicBackground)
                </label>
                @if (Html.ViewData.ModelState["EthnicBackground"]?.Errors.Count > 0)
                {
                        <span id="EthnicBackground-error" class="govuk-error-message">
                            <span class="govuk-visually-hidden">Error:</span>
                            @Html.ValidationMessageFor(model => model.EthnicBackground)
                        </span>
                        <input asp-for="EthnicBackground" class="govuk-input  govuk-input govuk-input--error" id="EthnicBackground" aria-describedby="EthnicBackground-error" value="@(Model.EthnicBackground)" />
                }
                else
                {
                        <input asp-for="EthnicBackground" class=" govuk-input" id="EthnicBackground" value="@(Model.EthnicBackground)" />
                }
            </div>




            <div class="govuk-form-group @(Html.ViewData.ModelState["LongTermConditionOrIllness"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="LongTermConditionOrIllness" class="govuk-label" for="LongTermConditionOrIllness">
                    @Html.DisplayNameFor(model => Model.LongTermConditionOrIllness)
                </label>
                @if (Html.ViewData.ModelState["LongTermConditionOrIllness"]?.Errors.Count > 0)
                {
                    <span id="LongTermConditionOrIllness-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.LongTermConditionOrIllness)
                    </span>
                }
                <div class="govuk-radios" data-module="govuk-radios">
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.LongTermConditionOrIllness, "Yes" , new { @class = "govuk-radios__input", id = "LongTermConditionOrIllness" })
                        @Html.Label("LongTermConditionOrIllnessYes","Yes", new { @class = "govuk-label govuk-radios__label" })
                    </div>
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.LongTermConditionOrIllness, "No" , new { @class = "govuk-radios__input", id = "LongTermConditionOrIllnessNo" })
                        @Html.Label("LongTermConditionOrIllnessNo", "No", new { @class = "govuk-label govuk-radios__label" })
                    </div>
                    <p class="govuk-body text-secondary radio-options-divider">or</p>
                    <div class="govuk-radios__item">
                        @Html.RadioButtonFor(m => m.LongTermConditionOrIllness, "Prefer not to say", new { @class = "govuk-radios__input", id = "LongTermConditionOrIllnesspreferNotToSay" })
                        @Html.Label("LongTermConditionOrIllnesspreferNotToSay", "Prefer not to say", new { @class = "govuk-label govuk-radios__label" })
                    </div>
                </div>
            </div>

            <areas-of-research-select-list for="AreasOfResearch" for-none="IncludeNoAreasOfInterest" plain="true" />

            <div class="govuk-button-group govuk-!-margin-bottom-0">
                <button type="submit" name="action" value="Save" class="govuk-button" data_module="govuk-button">Save</button>
                <a asp-action="Index" asp-controller="Study" class="govuk-button govuk-button--secondary" data_module="govuk-button--secondary">
                    Cancel
                </a>
            </div>

        </form>

        </div>
    </div>