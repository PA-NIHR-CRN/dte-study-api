@model BPOR.Rms.Models.Researcher.ResearcherStudyFormViewModel

@{
    ViewData["Title"] = "Create an account - Be Part of Research volunteer registry - Be Part of Research";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds govuk-grid-column-one-half-from-desktop">
        
        <h1 class="govuk-heading-xl">Create an account to access the Be Part of Research registry</h1>

        <div class="govuk-inset-text">
            <b>Please note: </b>In order to accee the Be Part of Research volunteer registry and submit your study 
            to find volunteers you will first need an NIHR account.
        </div>

        <partial name="Partials/_ErrorSummary" />

        <form asp-action="Create">
           
            <div class="govuk-form-group @(Html.ViewData.ModelState["EmailAddress"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="EmailAddress" class="govuk-label" for="EmailAddress">
                    @Html.DisplayNameFor(model => model.EmailAddress)
                </label>
                @if (Html.ViewData.ModelState["EmailAddress"]?.Errors.Count > 0)
                {
                    <span id="EmailAddress-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.EmailAddress)
                    </span>
                    <input asp-for="EmailAddress" class="govuk-input govuk-input--error" id="EmailAddress" aria-describedby="EmailAddress-error" type="text" />
                }
                else
                {
                    <input asp-for="EmailAddress" class="govuk-input" id="EmailAddress" value="@(Model.EmailAddress)" type="text" />
                }
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["FirstName"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="FirstName" class="govuk-label" for="FirstName">
                    @Html.DisplayNameFor(model => model.FirstName)
                </label>
                @if (Html.ViewData.ModelState["FirstName"]?.Errors.Count > 0)
                {
                    <span id="FirstName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </span>
                    <input asp-for="FirstName" class="govuk-input govuk-input--error" id="FirstName" aria-describedby="FirstName-error" type="text" />
                }
                else
                {
                    <input asp-for="FirstName" class="govuk-input" id="FirstName" value="@(Model.FirstName)" type="text" />
                }
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["LastName"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="LastName" class="govuk-label" for="LastName">
                    @Html.DisplayNameFor(model => model.LastName)
                </label>
                @if (Html.ViewData.ModelState["LastName"]?.Errors.Count > 0)
                {
                    <span id="LastName-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.LastName)
                    </span>
                    <input asp-for="LastName" class="govuk-input govuk-input--error" id="LastName" aria-describedby="LastName-error" type="text" />
                }
                else
                {
                    <input asp-for="LastName" class="govuk-input" id="LastName" value="@(Model.LastName)" type="text" />
                }
            </div>

            <div class="govuk-form-group @(Html.ViewData.ModelState["Password"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
                <label asp-for="Password" class="govuk-label" for="Password">
                    @Html.DisplayNameFor(model => model.Password)
                </label>
                <div id="event-name-hint" class="govuk-hint">
                    Your password must be a minimum of 12 characters (letters and numbers only, no special characters)
                </div>
                @if (Html.ViewData.ModelState["Password"]?.Errors.Count > 0)
                {
                    <span id="Password-error" class="govuk-error-message">
                        <span class="govuk-visually-hidden">Error:</span>
                        @Html.ValidationMessageFor(model => model.Password)
                    </span>
                    <input asp-for="Password" class="govuk-input govuk-input--error" id="Password" aria-describedby="Password-error" type="password" />
                }
                else
                {
                    <input asp-for="Password" class="govuk-input" id="Password" value="@(Model.Password)" type="password" />
                }
            </div>

            <button type="submit" name="action" value="Save" class="govuk-button" data_module="govuk-button">Create account</button>
        </form>

    </div>
</div>
