@model BPOR.Rms.Models.Researcher.ResearcherStudyFormViewModel
@{
    var isEditMode = ViewData["IsEditMode"] as bool? ?? false;
}

<h1 class="govuk-heading-xl">
    Study recruitment
</h1>

<div class="govuk-form-group  @(Html.ViewData.ModelState["RecruitmentStartDate.Day"]?.Errors.Count > 0 || Html.ViewData.ModelState["RecruitmentStartDate.Month"]?.Errors.Count > 0 || Html.ViewData.ModelState["RecruitmentStartDate.Year"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
    <label asp-for="UKRecruitmentTarget" class="govuk-label">
        Recruitment start date (UK)?
    </label>
    <div id="uk-recruitment-target-start-hint" class="govuk-hint">
        If you are unsure, provide an estimate.
    </div>
    @if (Html.ViewData.ModelState["RecruitmentStartDate.Day"]?.Errors.Count > 0)
    {
        <span id="RecruitmentStartDateDay-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span>
            @Html.ValidationMessageFor(model => model.RecruitmentStartDate.Day)
        </span>
    }
    @if (Html.ViewData.ModelState["RecruitmentStartDate.Month"]?.Errors.Count > 0)
    {
        <span id="RecruitmentStartDateMonth-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span>
            @Html.ValidationMessageFor(model => model.RecruitmentStartDate.Month)
        </span>
    }
    @if (Html.ViewData.ModelState["RecruitmentStartDate.Year"]?.Errors.Count > 0)
    {
        <span id="RecruitmentStartDateYear-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span>
            @Html.ValidationMessageFor(model => model.RecruitmentStartDate.Year)
        </span>
    }
    <div class="govuk-date-input" id="registration-date-from">
        <!-- Day -->
        <div class="govuk-date-input__item">
            <label class="govuk-label govuk-label--n" asp-for="RecruitmentStartDate.Day">@Html.DisplayNameFor(model => model.RecruitmentStartDate.Day)</label>
            <input class="govuk-input govuk-date-input__input govuk-input--width-3" asp-for="RecruitmentStartDate.Day" autocomplete="off" type="text" inputmode="numeric">

        </div>
        <!-- Month -->
        <div class="govuk-date-input__item">
            <label class="govuk-label govuk-label--n" asp-for="RecruitmentStartDate.Month">@Html.DisplayNameFor(model => model.RecruitmentStartDate.Month)</label>
            <input class="govuk-input govuk-date-input__input govuk-input--width-3" asp-for="RecruitmentStartDate.Month" autocomplete="off" type="text" inputmode="numeric">

        </div>
        <!-- Year -->
        <div class="govuk-date-input__item">
            <label class="govuk-label govuk-label--n" asp-for="RecruitmentStartDate.Year">@Html.DisplayNameFor(model => model.RecruitmentStartDate.Year)</label>
            <input class="govuk-input govuk-date-input__input govuk-input--width-4" asp-for="RecruitmentStartDate.Year" autocomplete="off" type="text" inputmode="numeric">

        </div>
    </div>
</div>

<div class="govuk-form-group  @(Html.ViewData.ModelState["RecruitmentEndDate.Day"]?.Errors.Count > 0 || Html.ViewData.ModelState["RecruitmentEndDate.Month"]?.Errors.Count > 0 || Html.ViewData.ModelState["RecruitmentEndDate.Year"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
    <label asp-for="UKRecruitmentTarget" class="govuk-label">
        Recruitment end date (UK)?
    </label>
    <div id="uk-recruitment-target-end-hint" class="govuk-hint">
        If you are unsure, provide an estimate.
    </div>
    @if (Html.ViewData.ModelState["RecruitmentEndDate.Day"]?.Errors.Count > 0)
    {
        <span id="RecruitmentEndDateDay-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span>
            @Html.ValidationMessageFor(model => model.RecruitmentEndDate.Day)
        </span>
    }
    @if (Html.ViewData.ModelState["RecruitmentEndDate.Month"]?.Errors.Count > 0)
    {
        <span id="RecruitmentEndDateMonth-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span>
            @Html.ValidationMessageFor(model => model.RecruitmentEndDate.Month)
        </span>
    }
    @if (Html.ViewData.ModelState["RecruitmentEndDate.Year"]?.Errors.Count > 0)
    {
        <span id="RecruitmentEndDateYear-error" class="govuk-error-message">
            <span class="govuk-visually-hidden">Error:</span>
            @Html.ValidationMessageFor(model => model.RecruitmentEndDate.Year)
        </span>
    }
    <div class="govuk-date-input" id="registration-date-from">
        <!-- Day -->
        <div class="govuk-date-input__item">
            <label class="govuk-label govuk-label--n" asp-for="RecruitmentEndDate.Day">@Html.DisplayNameFor(model => model.RecruitmentEndDate.Day)</label>
            <input class="govuk-input govuk-date-input__input govuk-input--width-3" asp-for="RecruitmentEndDate.Day" autocomplete="off" type="text" inputmode="numeric">

        </div>
        <!-- Month -->
        <div class="govuk-date-input__item">
            <label class="govuk-label govuk-label--n" asp-for="RecruitmentEndDate.Month">@Html.DisplayNameFor(model => model.RecruitmentEndDate.Month)</label>
            <input class="govuk-input govuk-date-input__input govuk-input--width-3" asp-for="RecruitmentEndDate.Month" autocomplete="off" type="text" inputmode="numeric">

        </div>
        <!-- Year -->
        <div class="govuk-date-input__item">
            <label class="govuk-label govuk-label--n" asp-for="RecruitmentEndDate.Year">@Html.DisplayNameFor(model => model.RecruitmentEndDate.Year)</label>
            <input class="govuk-input govuk-date-input__input govuk-input--width-4" asp-for="RecruitmentEndDate.Year" autocomplete="off" type="text" inputmode="numeric">

        </div>
    </div>
</div>

@Html.HiddenFor(m => m.RecruitingIdentifiableVolunteers)

@if (!isEditMode)
{
    <div class="govuk-form-group @(Html.ViewData.ModelState["RecruitingIdentifiableVolunteers"]?.Errors.Count > 0 ? "govuk-form-group--error" : "")">
        <label asp-for="RecruitingIdentifiableVolunteers" class="govuk-label">
            @Html.DisplayNameFor(model => model.RecruitingIdentifiableVolunteers)
        </label>
        <div id="recruiting-identifiable-volunteers-hint" class="govuk-hint">
            If you plan to recruit named individual volunteers to this study, select yes. If the study is recruiting an anonymous sample (for example, through a survey), select no.
        </div>
        <div class="govuk-radios" data-module="govuk-radios">
            <div class="govuk-radios__item">
                @Html.RadioButtonFor(m => m.RecruitingIdentifiableVolunteers, true, new { @class = "govuk-radios__input", id = "recruitingIdentifiableYes" })
                @Html.Label("Yes", "Yes", new { @class = "govuk-label govuk-radios__label" })
            </div>
            <div class="govuk-radios__item">
                @Html.RadioButtonFor(m => m.RecruitingIdentifiableVolunteers, false, new { @class = "govuk-radios__input", id = "recruitingIdentifiableNo" })
                @Html.Label("No", "No", new { @class = "govuk-label govuk-radios__label" })
            </div>
        </div>
    </div>
}