name: Deploy BPOR RMS Container

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (DEV, TEST, UAT, OAT, PROD)"
        required: true
        type: choice
        options:
          - DEV
          - TEST
          - UAT
          - OAT
          - PROD

env:
  AWS_REGION: eu-west-2
  SECRET_IDS: |
    DEV=crnccd-secret-dev-bpor-rms-app-config
    TEST=crnccd-secret-test-bpor-rms-app-config
    UAT=crnccs-secret-uat-bpor-rms-app-config
    OAT=crnccp-secret-oat-bpor-rms-app-config
    PROD=crnccp-secret-prod-bpor-rms-app-config

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract secret ID
        id: secret
        run: |
          echo "id=$(echo \"$SECRET_IDS\" | grep \"${{ github.event.inputs.environment }}=\" | cut -d'=' -f2)" >> $GITHUB_OUTPUT

      - name: Get secrets from Secrets Manager (build)
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: ${{ steps.secret.outputs.id }}
          parse-json-secrets: true

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REPOSITORY: ${{ env.EcrSettings__Repository }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=bpor-rms-${{ github.sha }}
          docker build -f BPOR/BPOR.Rms/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:bpor-rms \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg NUGET_PACKAGE_USERNAME=USERNAME \
            --build-arg NUGET_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }} .

          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract secret ID
        id: secret
        run: |
          echo "id=$(echo \"$SECRET_IDS\" | grep \"${{ github.event.inputs.environment }}=\" | cut -d'=' -f2)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ github.event.inputs.environment == 'PROD' && secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID || github.event.inputs.environment == 'OAT' && secrets.CRNCC_PROD_IAM_ACCESS_KEY_ID || github.event.inputs.environment == 'UAT' && secrets.CRNCC_STAGING_IAM_ACCESS_KEY_ID || secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ github.event.inputs.environment == 'PROD' && secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET || github.event.inputs.environment == 'OAT' && secrets.CRNCC_PROD_IAM_ACCESS_KEY_SECRET || github.event.inputs.environment == 'UAT' && secrets.CRNCC_STAGING_IAM_ACCESS_KEY_SECRET || secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: ${{ steps.secret.outputs.id }}
          parse-json-secrets: true

      - name: Generate ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.EcsSettings__TaskDefinition }} \
            --query taskDefinition > task-definition.json
          jq 'del(.taskDefinitionArn, .requiresAttributes, .compatibilities, .revision, .status, .registeredAt, .registeredBy)' task-definition.json > cleaned.json

      - name: Fill in image in ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: cleaned.json
          container-name: ${{ env.EcsSettings__ContainerName }}
          image: ${{ needs.build.outputs.image }}
          environment-variables: |
            AwsSecretsManagerSettings__Region=${{ env.AWS_REGION }}
            AwsSecretsManagerSettings__SecretName=${{ env.AwsSecretsManagerSettings__SecretName }}
            AwsSecretsManagerSettings__Enabled=false
            DbSettings__Port=${{ env.DbSettings__Port }}
            DbSettings__Username=${{ env.DbSettings__Username }}
            DbSettings__Password=${{ env.DbSettings__Password }}
            DbSettings__Database=${{ env.DbSettings__Database }}
            DbSettings__Host=${{ env.DbSettings__Host }}
            AuthenticationSettings__Authority=${{ env.AuthenticationSettings__Authority }}
            AuthenticationSettings__ClientId=${{ env.AuthenticationSettings__ClientId }}
            AuthenticationSettings__ClientSecret=${{ env.AuthenticationSettings__ClientSecret }}
            AuthenticationSettings__Bypass=${{ env.AuthenticationSettings__Bypass }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.EcsSettings__Service }}
          cluster: ${{ env.EcsSettings__Cluster }}
          wait-for-service-stability: true
