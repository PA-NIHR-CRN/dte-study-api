name: Deploy BPOR RMS Container

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: DEV
        type: choice
        options:
          - DEV
          - TEST
          - UAT
          - OAT
          - PROD
          
env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secret name
        id: get-secret-id
        run: |
          declare -A secrets=(
            [DEV]=crnccd-secret-dev-bpor-rms-app-config
            [TEST]=crnccd-secret-test-bpor-rms-app-config
            [UAT]=crnccs-secret-uat-bpor-rms-app-config
            [OAT]=crnccp-secret-oat-bpor-rms-app-config
            [PROD]=crnccp-secret-prod-bpor-rms-app-config
          )
          echo "id=${secrets[DEV]}" >> $GITHUB_OUTPUT

      - name: Get Secrets from AWS
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: ${{ steps.get-secret-id.outputs.id }}
          parse-json-secrets: true

      - name: Set ECR_REPOSITORY environment variable
        run: echo "ECR_REPOSITORY=${{ env.EcrSettings__Repository }}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to ECR
        id: build-image
        env:
          ECR_REPOSITORY: crnccd-ecr-dev-bpor-rms-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME_TAG: bpor-rms
          IMAGE_SHA_TAG: bpor-rms-${{ github.sha }}
        run: |
          echo "Using registry $ECR_REGISTRY"
          docker build -f BPOR/BPOR.Rms/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_NAME_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG \
            --build-arg NUGET_PACKAGE_USERNAME=USERNAME \
            --build-arg NUGET_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }}

          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> $GITHUB_OUTPUT
