name: Build and Deploy BPOR RMS Container

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_sha_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Set image tag
        id: set-tag
        run: echo "tag=bpor-rms-${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Build and save Docker image
        env:
          IMAGE_NAME_TAG: bpor-rms
        run: |
          docker build -f BPOR/BPOR.Rms/Dockerfile \
            --build-arg NUGET_PACKAGE_USERNAME=USERNAME \
            --build-arg NUGET_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -t $IMAGE_NAME_TAG .
          docker save $IMAGE_NAME_TAG > /tmp/bpor-rms.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bpor-rms
          path: /tmp/bpor-rms.tar

  deploy:
    name: Deploy to ${{ matrix.env }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - env: DEV
            ecr_repo: crnccd-ecr-dev-bpor-rms-repository
            ecs_service: crnccd-ecs-dev-bpor-rms-service
            ecs_cluster: crnccd-ecs-dev-bpor-rms-cluster
            task_def: crnccd-ecs-dev-bpor-rms-task-definition
            container_name: crnccd-ecs-dev-bpor-rms-container
            config_secret: ${{ secrets.BPOR_RMS_APP_CONFIG_SECRET_DEV }}
            aspnet_env: Development
            aws_key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
            aws_secret: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}

          - env: TEST
            ecr_repo: crnccd-ecr-test-bpor-rms-repository
            ecs_service: crnccd-ecs-test-bpor-rms-service
            ecs_cluster: crnccd-ecs-test-bpor-rms-cluster
            task_def: crnccd-ecs-test-bpor-rms-task-definition
            container_name: crnccd-ecs-test-bpor-rms-container
            config_secret: ${{ secrets.BPOR_RMS_APP_CONFIG_SECRET_TEST }}
            aspnet_env: Development
            aws_key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
            aws_secret: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}

          # Add UAT, OAT, PROD similarly...

    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ matrix.aws_key }}
          aws-secret-access-key: ${{ matrix.aws_secret }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
        with:
          mask-password: 'true'

      - uses: actions/download-artifact@v4
        with:
          name: bpor-rms
          path: /tmp

      - run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/pa-nihr-crn/index.json"

      - run: dotnet tool install --global dotnet-ef
      - run: dotnet restore BPOR/BPOR.sln
      - run: dotnet build BPOR/BPOR.sln --no-restore --configuration Release

      - name: Get GitHub Actions Runner IP
        id: publicip
        run: echo "ip=$(curl -s icanhazip.com)" >> "$GITHUB_OUTPUT"

      - name: Allow IP to RDS
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.RDS_SG }} \
            --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32"}]}]'

      - name: Update DB
        env:
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
        run: |
          cd BPOR/BPOR.Domain
          dotnet ef database update --connection "$DB_CONNECTION_STRING"

      - name: Load, Tag, and Push Image
        id: docker
        run: |
          docker load --input /tmp/bpor-rms.tar
          IMAGE_ID=$(docker images | awk '/bpor-rms/{print $3}')
          TAG=${{ needs.build.outputs.image_sha_tag }}
          docker tag $IMAGE_ID ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}:$TAG
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}:$TAG
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repo }}:$TAG" >> "$GITHUB_OUTPUT"

      - name: Generate ECS Task Definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ matrix.task_def }} --query taskDefinition > task-definition.json
          jq 'del(
            .taskDefinitionArn, .requiresAttributes, .compatibilities,
            .revision, .status, .registeredAt, .registeredBy,
            .containerDefinitions[].environment)' task-definition.json > clean-task-def.json

      - uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: task-def
        with:
          task-definition: clean-task-def.json
          container-name: ${{ matrix.container_name }}
          image: ${{ steps.docker.outputs.image }}
          environment-variables: |
            AwsSecretsManagerSettings__Region=${{ secrets.AWS_REGION }}
            AwsSecretsManagerSettings__SecretName=${{ matrix.config_secret }}
            AwsSecretsManagerSettings__Enabled=true
            ASPNETCORE_ENVIRONMENT=${{ matrix.aspnet_env }}

      - name: Revoke RDS Access
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.RDS_SG }} \
            --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 3306, "ToPort": 3306, "IpRanges": [{"CidrIp": "${{ steps.publicip.outputs.ip }}/32"}]}]'

      - uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.ecs_service }}
          cluster: ${{ matrix.ecs_cluster }}
          wait-for-service-stability: true
