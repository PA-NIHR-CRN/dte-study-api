name: Deploy BPOR RMS Container

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: ALL
        type: choice
        options:
          - DEV
          - TEST
          - UAT
          - OAT
          - PROD
          - ALL

env:
  AWS_REGION: eu-west-2

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR registry
        id: get-registry
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "registry=${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT

      - name: Get secrets for build (DEV by default)
        id: get-secrets
        run: |
          SECRET_ID=crnccd-secret-dev-bpor-rms-app-config
          echo "id=$SECRET_ID" >> $GITHUB_OUTPUT

      - name: Get Secrets from AWS
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: ${{ steps.get-secrets.outputs.id }}
          parse-json-secrets: true

      - name: Build and push image to ECR
        id: build-image
        env:
          ECR_REPOSITORY: ${{ env.EcrSettings__Repository }}
          ECR_REGISTRY: ${{ steps.get-registry.outputs.registry }}
        run: |
          IMAGE_TAG=bpor-rms-${{ github.sha }}
          docker build -f BPOR/BPOR.Rms/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:bpor-rms \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg NUGET_PACKAGE_USERNAME=USERNAME \
            --build-arg NUGET_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }} .

          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    if: github.event.inputs.environment != 'ALL'
    runs-on: ubuntu-latest
    name: Deploy to ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get secret name
        id: get-secret-id
        run: |
          declare -A secrets=(
            [DEV]=crnccd-secret-dev-bpor-rms-app-config
            [TEST]=crnccd-secret-test-bpor-rms-app-config
            [UAT]=crnccs-secret-uat-bpor-rms-app-config
            [OAT]=crnccp-secret-oat-bpor-rms-app-config
            [PROD]=crnccp-secret-prod-bpor-rms-app-config
          )
          echo "id=${secrets[${{ github.event.inputs.environment }}]}" >> $GITHUB_OUTPUT

      - name: Get secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: ${{ steps.get-secret-id.outputs.id }}
          parse-json-secrets: true

      - name: Generate ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.EcsSettings__TaskDefinition }} \
            --query taskDefinition > task-definition.json

          cat task-definition.json | jq 'del(
            .taskDefinitionArn,
            .requiresAttributes,
            .compatibilities,
            .revision,
            .status,
            .registeredAt,
            .registeredBy,
            .containerDefinitions[].environment
          )' > task-definition.json

      - name: Fill in new image ID
        id: render-task
        env:
          IMAGE: ${{ needs.build.outputs.image }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.EcsSettings__ContainerName }}
          image: ${{ env.IMAGE }}
          environment-variables: |
            AwsSecretsManagerSettings__Region=${{ env.AWS_REGION }}
            AwsSecretsManagerSettings__SecretName=${{ steps.get-secret-id.outputs.id }}
            AwsSecretsManagerSettings__Enabled=true

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: ${{ env.EcsSettings__Service }}
          cluster: ${{ env.EcsSettings__Cluster }}
          wait-for-service-stability: true
