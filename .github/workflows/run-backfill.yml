name: Run BPOR DynamoDB Backfill Once

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build-and-run-backfill:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build Docker image for DynamoDB backfill
        env:
          IMAGE_NAME_TAG: bpor-backfill
          IMAGE_SHA_TAG: bpor-backfill-${{ github.sha }}
          ECR_REPOSITORY: crnccd-ecr-dev-bpor-rms-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -f BPOR/DynamoDBupdate/Dockerfile \
            --build-arg NUGET_PACKAGE_USERNAME=USERNAME \
            --build-arg NUGET_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -t $IMAGE_NAME_TAG .
          IMAGE_ID=$(docker images | awk '/bpor-backfill/{print $3}')
          docker tag $IMAGE_ID $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG

      - name: Create ECS task definition JSON
        env:
          IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:bpor-backfill-${{ github.sha }}
          EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          jq -n \
          --arg image "$IMAGE" \
          --arg execRole "$EXECUTION_ROLE_ARN" \
          --arg region "$AWS_REGION" \
          --arg timestamp "$(date +%s)" \
          '{
            family: "bpor-backfill-task-\($timestamp)",
            containerDefinitions: [
              {
                name: "bpor-backfill",
                image: $image,
                essential: true
              }
            ],
            requiresCompatibilities: ["FARGATE"],
            networkMode: "awsvpc",
            cpu: "256",
            memory: "512",
            executionRoleArn: $execRole
          }' > task-def.json

      - name: Register ECS task definition
        id: register-task
        run: |
          TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "::set-output name=task_arn::$TASK_ARN"

      - name: Run ECS task (one-off)
        env:
          CLUSTER: ${{ secrets.ECS_CLUSTER }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
          SECURITY_GROUP: ${{ secrets.RDS_SG }}
        run: |
          aws ecs run-task \
            --cluster $CLUSTER \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
            --task-definition ${{ steps.register-task.outputs.task_arn }} \
            --count 1
