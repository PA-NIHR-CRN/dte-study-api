name: Run BPOR Backfill Task Once

on:
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  backfill:
    runs-on: ubuntu-latest
    name: Run Backfill Job

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_ID }}
          aws-secret-access-key: ${{ secrets.NIHR_GITHUB_ACTIONS_IAM_SECRET }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true

      - name: Build and push Docker image
        id: build-image
        env:
          IMAGE_NAME_TAG: bpor-backfill
          IMAGE_SHA_TAG: bpor-backfill-${{ github.sha }}
          ECR_REPOSITORY: crnccd-ecr-dev-bpor-rms-repository
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -f BPOR/DynamoDBupdate/Dockerfile \
            --build-arg NUGET_PACKAGE_USERNAME=USERNAME \
            --build-arg NUGET_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }} \
            -t $IMAGE_NAME_TAG .

          IMAGE_ID=$(docker images | awk '/bpor-backfill/{print $3}')
          docker tag $IMAGE_ID $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG" >> "$GITHUB_OUTPUT"

      - name: Get base ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition crnccd-ecs-dev-bpor-rms-task-definition \
            --query taskDefinition > task-definition.json

      - name: Inject new image into task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: crnccd-ecs-dev-bpor-rms-container
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            AwsSecretsManagerSettings__Region=${{ secrets.AWS_REGION }}
            AwsSecretsManagerSettings__SecretName=${{ secrets.BPOR_RMS_APP_CONFIG_SECRET_DEV }}
            AwsSecretsManagerSettings__Enabled=true
            ASPNETCORE_ENVIRONMENT=Development

      - name: Register new task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.task-def.outputs.task-definition }} \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Run ECS task once
        run: |
          aws ecs run-task \
            --cluster crnccd-ecs-dev-bpor-rms-cluster \
            --launch-type FARGATE \
            --task-definition ${{ steps.register-task.outputs.task_definition_arn }} \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.BPOR_RMS_DEV_SUBNET_ID }}],securityGroups=[${{ secrets.RDS_SG }}],assignPublicIp=ENABLED}" \
            --count 1
